name: Setup QEMU (simple & on-demand)

on:
  workflow_dispatch:
  push:
    branches: [ main, "copilot/*" ]
  pull_request:

jobs:
  setup-qemu:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      QEMU_DIR: qemu
      QEMU_BIN: qemu/build/qemu-system-arm

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Detect existing QEMU binary
        id: detect
        shell: bash
        run: |
          if [ -x "${QEMU_BIN}" ]; then
            echo "need_build=false" >> "$GITHUB_OUTPUT"
            echo "Found existing ${QEMU_BIN}, skip build."
          else
            echo "need_build=true" >> "$GITHUB_OUTPUT"
            echo "No ${QEMU_BIN}, will build."
          fi

      - name: Install build deps (only if build needed)
        if: steps.detect.outputs.need_build == 'true'
        run: |
          sudo apt update
          sudo apt install -y git ninja-build pkg-config python3 meson build-essential \
              libglib2.0-dev libpixman-1-dev zlib1g-dev libfdt-dev

      - name: Configure (arm-softmmu) if needed
        if: steps.detect.outputs.need_build == 'true'
        working-directory: ${{ env.QEMU_DIR }}
        run: |
          mkdir -p build
          cd build
          ../configure --target-list=arm-softmmu

      - name: Build QEMU if needed
        if: steps.detect.outputs.need_build == 'true'
        working-directory: ${{ env.QEMU_DIR }}/build
        run: |
          make -j"$(nproc)"
          ./qemu-system-arm --version || true

      - name: Print QEMU version (fast)
        if: steps.detect.outputs.need_build != 'true'
        run: |
          echo "Using existing ${QEMU_BIN}"
          "${QEMU_BIN}" --version || true

      - name: Install ARM cross toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi binutils-arm-none-eabi \
            libnewlib-arm-none-eabi gdb-multiarch

      - name: Build Cortex-M0 example
        working-directory: examples/m0
        run: |
          make
          file build/m0.elf
          arm-none-eabi-size build/m0.elf

      - name: Run on QEMU (Cortex-M0, micro:bit)
        run: |
          echo "Running Cortex-M0 example on QEMU micro:bit..."
          timeout 30 "${QEMU_BIN}" -M microbit -nographic -semihosting \
            -kernel examples/m0/build/m0.elf | tee m0_qemu_out.txt || true
          echo "QEMU output:"
          cat m0_qemu_out.txt
          echo "Checking for expected output..."
          grep -q "Hello from M0" m0_qemu_out.txt

      - name: Cleanup intermediates (always)
        if: always()
        shell: bash
        run: |
          echo "Cleaning intermediate files..."
          # Clean QEMU build artifacts but keep the binary
          rm -rf "${QEMU_DIR}/meson-info" \
                 "${QEMU_DIR}/meson-logs" \
                 "${QEMU_DIR}/meson-private" \
                 "${QEMU_DIR}/config.log" \
                 "${QEMU_DIR}/config-host.mak" \
                 "${QEMU_DIR}/config.status" || true
          # Clean example build artifacts
          make -C examples/m0 clean || true
          rm -f m0_qemu_out.txt || true
          echo "Workspace after cleanup:"
          du -sh . || true
